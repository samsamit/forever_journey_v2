type authType {
  id: ID!
  masterKey: masterKey
  username: String
  token: String
}

type masterKey {
  key: String!
}

type Mutation {
  signup(
    username: String!
    email: String!
    password: String!
    password2: String!
  ): signupPayload! @lambda
}

type Query {
  login(username: String!, password: String!): loginPayload! @lambda
}

type loginPayload {
  user: User
  token: String
  error: String
}

type signupPayload {
  username: String
  token: String
  errors: ErrorList
}
type Character {
  id: ID!
  name: String!
  race: String!
  owner: User! @hasInverse(field: characters)
  attributes: Attributes
}

type Attributes {
  hp: Int
  atk: Int
  mov: Int
}
type ErrorList {
  password: String
  username: String
}
type User @secret(field: "password") {
  username: String! @id
  email: String!
  characters: [Character] @hasInverse(field: owner)
  parties: [party] @hasInverse(field: name)
  role: UserRole! @search
}

type party {
  name: String! @id
  characters: [Character]
}

enum UserRole {
  USER
  ADMIN
}

# Dgraph.Authorization {"VerificationKey":"YourSecretKey","Header":"auth","Namespace":"https://localhost:8080/jwt/claims","Algo":"HS256"}
